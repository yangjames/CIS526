#!/usr/bin/python
import optparse
import sys
from collections import defaultdict

# parse command line inputs 
optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()

# get file names of documents
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

# split documents by line and split sentences into words
sys.stderr.write("Training with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

# create hash tables for each unique french word count per sentence,
# each unique english word count per sentence,
# and occurrence of each unique french english pair per sentence
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
for (n, (f, e)) in enumerate(bitext):
  for f_i in set(f):
    f_count[f_i] += 1
    for e_j in set(e):
      fe_count[(f_i,e_j)] += 1
  for e_j in set(e):
    e_count[e_j] += 1
  if n % 500 == 0:
    sys.stderr.write(".")

# intialize t(f|e) uniformly - pseudocode line 1
t_fi_given_ej = defaultdict(float)
for (f,e) in bitext:
  for f_i in set(f):
    for e_j in set(e):
      t_fi_given_ej[(f_i,e_j)] = float(1)/len(e)

# begin EM
iterator = 0
max_iter = 6
while iterator < max_iter: # pseudocode line 2
  # intialize - pseudocode line 3
  count_fi_given_ej = defaultdict(float)
  total_ej = defaultdict(float)
  for (f,e) in bitext:
    for f_i in set(f):
      for e_j in set(e):
        count_fi_given_ej[(f_i,e_j)] = 0
    for e_j in set(e):
      total_ej[e_j] = 0

  # pseudocode line 6
  for (f,e) in bitext:
    s_total_fi = defaultdict(float)
    # compute normalization
    for f_i in set(f):
      s_total_fi[f_i] = 0
      for e_j in set(e):
        s_total_fi[f_i] += t_fi_given_ej[(f_i,e_j)]
    # collect counts
    for f_i in set(f):
      for e_j in set(e):
        count_fi_given_ej[(f_i,e_j)] += t_fi_given_ej[(f_i,e_j)]/s_total_fi[f_i]
        total_ej[e_j] += t_fi_given_ej[(f_i,e_j)]/s_total_fi[f_i]

  # estimate probabilities
  for (f_i,e_j) in set(t_fi_given_ej.keys()):
    t_fi_given_ej[(f_i,e_j)] = count_fi_given_ej[(f_i,e_j)]/total_ej[e_j]

  iterator += 1

# print out alignment
for (f, e) in bitext:
  biggest = 0.0
  idx = 0
  for (i, f_i) in enumerate(f): 
    for (j, e_j) in enumerate(e):
      if t_fi_given_ej[(f_i,e_j)] > biggest:
        biggest = t_fi_given_ej[(f_i,e_j)]
        idx = j
    sys.stdout.write("%i-%i " % (i,idx))
  sys.stdout.write("\n")
