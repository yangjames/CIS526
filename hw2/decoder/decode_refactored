#!/usr/bin/env python
import optparse
import sys
import models
import itertools
import math
from collections import namedtuple
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

# TM contains tuples of words
tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

def extract_english(h): 
  return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french:
  # The following code implements a monotone decoding
  # algorithm (one that doesn't permute the target phrases).
  # Hence all hypotheses in stacks[i] represent translations of 
  # the first i words of the input sentence. You should generalize
  # this so that they can represent translations of *any* i words.
  potential_winners = defaultdict(float)
  
  idx = 0;
  num_possible = math.factorial(len(f))
  for l,french_sentence in enumerate(itertools.permutations(f)):
    percent = l*100/float(num_possible)
    sys.stderr.write("\rpercent done in sentence: %6.10f%%" % percent)
    hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase")
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None)
  
    stacks = [{} for _ in french_sentence] + [{}]
  
    stacks[0][lm.begin()] = initial_hypothesis

    for i, stack in enumerate(stacks[:-1]):
    
      # loop through stack dictionary contents, starting with the values with the lowest log probability
      for current_hypothesis in sorted(stack.itervalues(),key=lambda h: -h.logprob)[:opts.s]: # prune
      
        # loop over each word within the current range, that is (current-pos+1 -> length+1)
        for j in xrange(i+1,len(french_sentence)+1):
          
          # if the current range of words exists in our translation model
          if french_sentence[i:j] in tm:

            # not really looping over phrases here in the k=1 case, this line is akin to phrase = tm[french_sentence[i:j]]
            for phrase in tm[french_sentence[i:j]]:

              # add the logprob for this phrase to the logprob of the current hypothesis
              logprob = current_hypothesis.logprob + phrase.logprob
            
              # extract the current state of the language model
              current_lm_state = current_hypothesis.lm_state
            
              # find the log prob of each word in the phrase, given the current language models state
              # then add the logprob into the logprob tally for this phrase
              for word in phrase.english.split():
                (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
                logprob += word_logprob
              
              # add the log prob that this is the end of the sentence (once we hit the end)
              logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
            
              # create a new hypothesis value given the current set of data
              new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase)
            
              # add it to the current stack for the state if that state's stack is empty, or if the log prob is lower
              if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob: # second case is recombination
                stacks[j][current_lm_state] = new_hypothesis 
  
    # take the lowest absolute log prob value as our winner
    winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
    if len(potential_winners) > 0:
      if winner.logprob > potential_winners.logprob:
        potential_winner = winner
    else:
      potential_winner = winner

  print extract_english(actual_winner)

  # such verbose
  if opts.verbose:
    def extract_tm_logprob(h):
      return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
    tm_logprob = extract_tm_logprob(winner)
    sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
                   (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
