#!/usr/bin/env python
import optparse
import sys
import models
import itertools, math
from collections import namedtuple, defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]
def extract_english(h): 
  return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

max_perms = 10000
sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f,french_sentence in enumerate(french):
  # The following code implements a monotone decoding
  # algorithm (one that doesn't permute the target phrases).
  # Hence all hypotheses in stacks[i] represent translations of 
  # the first i words of the input sentence. You should generalize
  # this so that they can represent translations of *any* i words.

  future_cost = [[0.0 for _ in french_sentence] for _ in french_sentence]
  for length in xrange(1,len(french_sentence)+1):
    for start in xrange(1,len(french_sentence)+1-length):
      end = start+length
      future_cost[start-1][end-1] = float('-inf')
      if french_sentence[start-1:end-1] in tm:
        for phrase in tm[french_sentence[start-1:end-1]]:
          logprob = phrase.logprob
          current_lm_state = lm.begin()
          for word in phrase.english.split():
            (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
            logprob += word_logprob
          logprob += lm.end(current_lm_state) if end == len(french_sentence) else 0.0
          future_cost[start-1][end-1] = logprob
          for i in xrange(start-1,end-2):
            if future_cost[start-1][i] + future_cost[i+1][end-1] < future_cost[start-1][end-1]:
              future_cost[start-1][end-1] = future_cost[start-1][i] + future_cost[i+1][end-1]
  """
  for i in xrange(0,len(future_cost)):
    sys.stderr.write(str(future_cost[i])+'\n')
  """
  #pause = raw_input()
  hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, bit_vec")

  initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, defaultdict(bool))

  stacks = [{} for _ in french_sentence] + [{}]
  stacks[0][lm.begin()] = initial_hypothesis
  for i, stack in enumerate(stacks[:-1]):
    
    for j in xrange(i+1,len(french_sentence)+1):
      for current_hypothesis in sorted(stack.itervalues(),key=lambda h: -h.logprob)[:opts.s]: # prune
        if len(french_sentence[i:j]) < 9 and f != 25:
          #sys.stderr.write(str(french_sentence[i:j])+'\n')
          for perm in itertools.permutations(french_sentence[i:j]):
            #sys.stderr.write(str(perm)+'\n')
            if perm in tm:
              for phrase in tm[perm]:
                logprob = current_hypothesis.logprob + phrase.logprob
                current_lm_state = current_hypothesis.lm_state
                for word in phrase.english.split():
                  (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
                  logprob += word_logprob
                logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
                new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase, current_hypothesis.bit_vec)
                for k in xrange(0,len(phrase)):
                  current_hypothesis.bit_vec[phrase[k]]=True
                if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob:
                  stacks[j][current_lm_state] = new_hypothesis
        else:
          if french_sentence[i:j] in tm:
            for phrase in tm[french_sentence[i:j]]:
              logprob = current_hypothesis.logprob + phrase.logprob
              current_lm_state = current_hypothesis.lm_state
              for word in phrase.english.split():
                (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
                logprob += word_logprob
              logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
              new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase, current_hypothesis.bit_vec)
              for k in xrange(0,len(phrase)):
                current_hypothesis.bit_vec[phrase[k]]=True
              if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob:
                stacks[j][current_lm_state] = new_hypothesis
        #pause = raw_input()

      #"""
      """
      for j in xrange(i+1,len(french_sentence)+1):
        #sys.stderr.write(str(french_sentence)+'\n')
        for k, perm in enumerate(itertools.permutations(french_sentence,j-i)):
          #sys.stderr.write(str(perm)+"%i " % (j-i) + '\n')
          if k > max_perms:
            break
          #pause = raw_input()
          if perm in tm:
            #sys.stderr.write("\rlooking at %i length iteration number %i" % (j-i,k))
            for phrase in tm[perm]:
              logprob = current_hypothesis.logprob + phrase.logprob
              current_lm_state = current_hypothesis.lm_state
              for word in phrase.english.split():
                (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
                logprob += word_logprob
              logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
              new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase)
              if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob:
               
                stacks[j-i][current_lm_state] = new_hypothesis
      """

      """ 
      # bidirectional decoder with 2 permutations
      for j in xrange(i+1,len(french_sentence)+1):
        for k,chunk in enumerate(itertools.permutations(french_sentence[i:j])):
          if k > 1:
            break
          if chunk in tm:
            for phrase in tm[chunk]:
              logprob = current_hypothesis.logprob + phrase.logprob
              current_lm_state = current_hypothesis.lm_state
              for word in phrase.english.split():
                (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
                logprob += word_logprob
              logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
              new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase)
              if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob:
                stacks[j][current_lm_state] = new_hypothesis
          
          reversed = chunk[::-1]
          if reversed in tm:
            for phrase in tm[reversed]:
              logprob = current_hypothesis.logprob + phrase.logprob
              current_lm_state = current_hypothesis.lm_state
              for word in phrase.english.split():
                (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
                logprob += word_logprob
              logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
              new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase)
              if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob:
                stacks[j][current_lm_state] = new_hypothesis
      """
  """
  # debug lines
  for k in xrange(len(stacks)):
    sys.stderr.write("%i " % k)
    for hyp in stacks[k].itervalues():
      sys.stderr.write(extract_english(hyp) + ' | ')
      sys.stderr.write("\n\n")
  blah = raw_input()
  """

  """
        # arbitrary permutation decoder
        for l,perm in enumerate(itertools.permutations(french_sentence[i:j])):
          if l%20 != 0 or l > max_perms:
            break
          if perm in tm:
            for phrase in tm[perm]:
              logprob = current_hypothesis.logprob + phrase.logprob
              current_lm_state = current_hypothesis.lm_state
              #sys.stderr.write(str(current_lm_state)+'\n')
              for word in phrase.english.split():
                (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
                logprob += word_logprob
              logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0
              new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase)
              if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob:
                stacks[j][current_lm_state] = new_hypothesis
  """     
  winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
  sys.stderr.write("sentence %i " % (f+1) + '\n' + extract_english(winner) + '\n')
  print extract_english(winner)
  """
  if opts.verbose:
    def extract_tm_logprob(h):
      return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
    tm_logprob = extract_tm_logprob(winner)
    sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
                   (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
  """
