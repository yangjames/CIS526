#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
import sys
from collections import defaultdict

def word_matches(h, ref):
    # create different possible chunks
    r_dict = [[] for x in xrange(len(ref)*(len(ref)+1)/2)]
    idx = 0
    for r_start in xrange(0,len(ref)+1):
        for r_end in xrange(r_start+1, len(ref)+1):
            r_dict[idx] = ref[r_start:r_end]
            idx+=1

    # get chunks
    c = 0.0
    h_start = 0
    h_end = 1
    while h_end < len(h)+1:
        potential_chunk = h[h_start:h_end]
        if potential_chunk in r_dict:
            h_end += 1
        else:
            c += 1
            h_start = h_end+1
            h_end = h_start+1
    m = sum(1.0 for w in h if w in set(ref))
    i = set(h).intersection(set(ref))
    P_he = float(len(i))/len(set(h))
    R_he = float(len(i))/len(set(ref))
    beta = 5.0
    gamma = 0.9
    alpha = 0.5
    if len(i) == 0:
        return 0.0
    return (1.0-gamma*((c/m) ** beta))*P_he*R_he/((1.0-alpha)*R_he+alpha*P_he)
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        h1_match = word_matches(h1, ref)
        h2_match = word_matches(h2, ref)
        print(1 if h1_match > h2_match else # \begin{cases}
                (0 if h1_match == h2_match
                    else -1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
